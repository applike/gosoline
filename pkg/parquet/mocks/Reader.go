// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import parquet "github.com/applike/gosoline/pkg/parquet"
import time "time"

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// ReadDates provides a mock function with given fields: ctx, dates, target
func (_m *Reader) ReadDates(ctx context.Context, dates []time.Time, target interface{}) error {
	ret := _m.Called(ctx, dates, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []time.Time, interface{}) error); ok {
		r0 = rf(ctx, dates, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadDatesAsync provides a mock function with given fields: ctx, dates, target, callback
func (_m *Reader) ReadDatesAsync(ctx context.Context, dates []time.Time, target interface{}, callback parquet.ResultCallback) error {
	ret := _m.Called(ctx, dates, target, callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []time.Time, interface{}, parquet.ResultCallback) error); ok {
		r0 = rf(ctx, dates, target, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadFile provides a mock function with given fields: ctx, file, callback
func (_m *Reader) ReadFile(ctx context.Context, file string, callback func(parquet.ReadResults, bool) error) error {
	ret := _m.Called(ctx, file, callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(parquet.ReadResults, bool) error) error); ok {
		r0 = rf(ctx, file, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
