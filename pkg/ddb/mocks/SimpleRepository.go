// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import ddb "github.com/applike/gosoline/pkg/ddb"
import mock "github.com/stretchr/testify/mock"

// SimpleRepository is an autogenerated mock type for the SimpleRepository type
type SimpleRepository struct {
	mock.Mock
}

// DeleteItem provides a mock function with given fields: ctx, result
func (_m *SimpleRepository) DeleteItem(ctx context.Context, result interface{}) (*ddb.DeleteItemResult, error) {
	ret := _m.Called(ctx, result)

	var r0 *ddb.DeleteItemResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *ddb.DeleteItemResult); ok {
		r0 = rf(ctx, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.DeleteItemResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: ctx, result
func (_m *SimpleRepository) GetItem(ctx context.Context, result interface{}) (*ddb.GetItemResult, error) {
	ret := _m.Called(ctx, result)

	var r0 *ddb.GetItemResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *ddb.GetItemResult); ok {
		r0 = rf(ctx, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.GetItemResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutItem provides a mock function with given fields: ctx, result
func (_m *SimpleRepository) PutItem(ctx context.Context, result interface{}) (*ddb.PutItemResult, error) {
	ret := _m.Called(ctx, result)

	var r0 *ddb.PutItemResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *ddb.PutItemResult); ok {
		r0 = rf(ctx, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.PutItemResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: ctx, qb, result
func (_m *SimpleRepository) Query(ctx context.Context, qb ddb.QueryBuilderSimple, result interface{}) (*ddb.QueryResult, error) {
	ret := _m.Called(ctx, qb, result)

	var r0 *ddb.QueryResult
	if rf, ok := ret.Get(0).(func(context.Context, ddb.QueryBuilderSimple, interface{}) *ddb.QueryResult); ok {
		r0 = rf(ctx, qb, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ddb.QueryResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ddb.QueryBuilderSimple, interface{}) error); ok {
		r1 = rf(ctx, qb, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryBuilder provides a mock function with given fields:
func (_m *SimpleRepository) QueryBuilder() ddb.QueryBuilderSimple {
	ret := _m.Called()

	var r0 ddb.QueryBuilderSimple
	if rf, ok := ret.Get(0).(func() ddb.QueryBuilderSimple); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddb.QueryBuilderSimple)
		}
	}

	return r0
}
